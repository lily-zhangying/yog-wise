{
  "name": "yog-log",
  "version": "0.0.6",
  "description": "yog logger",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/fex-team/yog-log.git"
  },
  "dependencies": {
    "mkdirp": "0.5.0",
    "stack-trace": "0.0.9"
  },
  "keywords": [
    "fis",
    "yog",
    "express",
    "kraken-js"
  ],
  "author": {
    "name": "fansekey"
  },
  "license": "BSD",
  "bugs": {
    "url": "https://github.com/fex-team/yog-log/issues"
  },
  "homepage": "https://github.com/fex-team/yog-log",
  "readme": "# Node Log 统计方案\r\n---\r\n## 这是什么\r\n\r\n基于Node.js的日志统计方案，兼容ODP日志格式与配置。关于ODP的日志方案调研可查看[此文档](./doc/odp-log.md).\r\n\r\n统计日志类型包括：\r\n\r\n### server日志\r\n - access_log: web访问日志，按小时分日志\r\n - error_log: web错误日志，按小时分日志\r\n\r\n访问日志统计方式为请求返还才触发。\r\n\r\n### 应用日志\r\n - 每个app有各自独立的日志，日志名为app的名称，例如demo.log和demo.log.wf。\r\n - 可配置每个app是否使用独立的子目录存放自身日志，例如demo/demo.log。\r\n - 可配置每个app是否按小时切分日志。\r\n - 可配置每个app的日志级别。\r\n - 对于不属于任何app的php程序，日志名为unknown-app.log。\r\n\r\n应用日志包括主动触发的统计以及未捕获的错误。\r\n\r\n## 快速开始\r\n\r\n1 npm全局安装yog-log,`npm install -g yog-log`\r\n\r\n2 Node启动脚本中通过中间件方式使用yog-log,并传入日志配置参数。如下DEMO所示：\r\n```javascript\r\nvar Logger = require('yog-log');\r\nvar app = express();\r\n//...此处省去代码\r\napp.use(Logger(config));//config为读取的日志配置参数\r\n```\r\n\r\n3 代码中res对象通过emit方式触发log事件，传递日志参数\r\n```\r\n//router层使用\r\ntry{\r\n    //do something\r\n}catch(e){\r\n    res.emit('log',{'stack':e,'errno':120,'msg' :'error happened!'},'warning'); //推荐\r\n    //or res.emit('log',{'stack':e});//日志等级不写默认为notice\r\n    //or res.emit('log','error!');//只写字符串不会解析错误堆栈\r\n}\r\n\r\n//model或其他没有res的地方使用\r\nvar logger = Logger.getLogger(config); //不传递config走默认配置，配置说明见日志接口\r\nlogger.log('warning','msg');//or logger.warning('msg');\r\n\r\n```\r\n\r\n## 接口文档\r\n\r\n### 应用日志等级\r\n\r\n应用日志等级分为 `FATAL` 、`WARNING `、`NOTICE` 、 `TRACE`、`DEBUG`几个，可以配置线上日志等级来确定统计哪些日志。默认为16，即统计所有日志(具体可参考下面日志默认配置说明)。\r\n\r\n### 日志统计接口\r\n\r\n针对每个应用日志等级都有相应的接口。如fatal日志可以通过 `logger.log('fatal',{'stack':e,'msg':'error!'})`的方式统计；也可以通过`logger.fatal({'stack':e,'msg':'error!'})` 方式统计。其他几个等级一样。\r\n\r\n如果是访问日志，对应的等级名称为`access`(正常访问)及`access_error`(异常访问404等)，使用方式跟应用日志一样。默认通过中间件方式使用yog-log时将统计访问日志和301、404错误日志。错误日志默认单独存储。\r\n\r\n**log(level,obj) 方法参数 ：**\r\n\r\n - level ： 日志等级，同上\r\n - obj： string或者object格式。如果是string，认为是错误消息。如果是object，请使用正确格式。正确格式为{'stack':e,'msg':'msg','errno':'010'}，分别代表错误堆栈、错误消息、错误码。错误消息如果不填将使用错误堆栈的消息。\r\n\r\n### 自定义配置\r\n\r\n统计模块默认以中间件的形式且只有请求过来才会进行初始化，初始化后可以在model等地方直接获取到此实例。如果未进行初始化(没有请求)就想使用日志统计，请传递日志参数。日志配置项见下所示。\r\n\r\n## 日志配置\r\n\r\n**默认配置**\r\n\r\n默认配置与ODP日志保持一致，如下所示：\r\n\r\n\r\n```\r\n    # 日志级别\r\n\t#  1：打印FATAL\r\n\t#  2：打印FATAL和WARNING\r\n\t#  4：打印FATAL、WARNING、NOTICE（线上程序正常运行时的配置）\r\n\t#  8：打印FATAL、WARNING、NOTICE、TRACE（线上程序异常时使用该配置）\r\n\t# 16：打印FATAL、WARNING、NOTICE、TRACE、DEBUG（测试环境配置）\r\n\tlevel: 16\r\n\r\n\t# 是否按小时自动分日志，设置为1时，日志被打在some-app.log.2011010101\r\n\tauto_rotate: 1\r\n\r\n\t# 日志文件路径是否增加一个基于app名称的子目录，例如：log/some-app/some-app.log\r\n\t# 该配置对于unknown-app同样生效\r\n\tuse_sub_dir: 1\r\n\r\n\tformat: format: %L: %t [%f:%N] errno[%E] logId[%l] uri[%U] refer[%{referer}i] cookie[%{cookie}i] %S %M\r\n\r\n\t# 提供绝对路径，日志存放的根目录，只有非odp环境下有效\r\n\tlog_path: /home/user/odp/log/\r\n\t# 提供绝对路径，日志格式数据存放的根目录，只有非odp环境下有效\r\n\tdata_path: /home/user/odp/data/\r\n\t# 是否开启Omp日志, 0默认值（两个日志文件都开启），1，只打印omp的new日志，2只打印老日志\r\n\tis_omp: 0\r\n```\r\n\r\n**配置项说明**\r\n\r\n配置项\t\t| 默认值\t| 说明\r\n--------------- | ----- | ---------------\r\nformat\t\t| 见下\t| 参照format string格式\r\nformat_wf\t| 见下\t| 参照format string格式\r\nlevel\t\t| 16\t| log日志级别\r\nauto_rotate\t| 1\t| 是否自动切分\r\nuse_sub_dir\t| 1\t| 日志是否在二级目录打印，目录名为 `${APP_NAME}`\r\nlog_path\t| 无\t| 日志存放目录\r\ndata_path\t| 无\t| 格式数据存放的目录\r\nis_omp\t\t| 0\t| 是否开启omp日志，如果不接入omp，建议置为2\r\n\r\n注意 ： `is_omp`日志格式不完全兼容\r\n\r\n完整日志格式配置项参考ODP LOG调研文档，部分指标支持不全，初期请勿修改格式配置参数\r\n\r\n## 联系我们\r\n\r\n邮件组： oak@baidu.com\r\n联系人： zhangtao07@baidu.com、wangcheng@biadu.com\r\n\r\n",
  "readmeFilename": "README.md",
  "_id": "yog-log@0.0.6",
  "dist": {
    "shasum": "42805d326c528f02326eccc4aff7a39d57bf6c99"
  },
  "_from": "yog-log@0.0.6",
  "_resolved": "https://registry.npmjs.org/yog-log/-/yog-log-0.0.6.tgz"
}
